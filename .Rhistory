trues <- test_i[, get_target(form)]
kappa_i[i] <- kappa2(cbind(preds, as.character(trues)))$value
}
mean(kappa_i)
}
t0 <- Sys.time()
paramset <- list(ntrees = c(50, 200),
pruning = c(.5, 3.5),
dselection = c(.5, 3.5),
pruning_cp = c(.25, .75))
OPT_Res <- Hyperband(bagging_optim,
maximize = TRUE,
bounds = paramset,
R = 6,
R_unit = 2,
eta = 3,
verbose = T)
OPT_Res1<<-OPT_Res
scoreval <- f_pipeline_hb(form, train, test, clean_hyperband_res(OPT_Res))
t1<-Sys.time()
dt <- t1-t0
list(score = scoreval, deltat = dt)
}
hb_iris <- f_pipeline_hb(Species ~., train, test, clean_hyperband_res(OPT_Res))
OPT_Res1
"bagging_optim" <-
function(r, ntrees, pruning, dselection, pruning_cp) {
nfolds <- 4
set.seed(1)
pruning <- as.character(round(pruning, 0L))
pruning <- switch(pruning, "1" = "none", "2" = "none", "3" = "mdsq")
dselection <- as.character(round(dselection, 0L))
dselection <- switch(dselection, "1" = "none", "2" = "ola", "3" = "knora-e")
print(paste(ntrees,pruning,dselection, pruning_cp))
FOLDS <- createFolds(train$class, list = FALSE, k = nfolds)
kappa_i <- numeric(nfolds)
print(ntrees)
for (i in seq_along(kappa_i)) {
train_i <- subset(train, FOLDS %in% i)
test_i  <- subset(train, !(FOLDS %in% i))
M <- bagging(form, train_i, ntrees=ntrees, pruning=pruning, dselection=dselection, pruning_cp=pruning_cp)
preds <- predict(M, test_i)
trues <- test_i[, get_target(form)]
kappa_i[i] <- kappa2(cbind(preds, as.character(trues)))$value
}
mean(kappa_i)
}
rm(bagging_optim)
hb <- hyper_pipeline(Species ~., train, test)
"bagging_optim" <-
function(r, ntrees, pruning, dselection, pruning_cp) {
nfolds <- 4
set.seed(1)
pruning <- as.character(round(pruning, 0L))
pruning <- switch(pruning, "1" = "none", "2" = "none", "3" = "mdsq")
dselection <- as.character(round(dselection, 0L))
dselection <- switch(dselection, "1" = "none", "2" = "ola", "3" = "knora-e")
print(paste(ntrees,pruning,dselection, pruning_cp))
FOLDS <- createFolds(train$class, list = FALSE, k = nfolds)
kappa_i <- numeric(nfolds)
print(ntrees)
for (i in seq_along(kappa_i)) {
train_i <- subset(train, FOLDS %in% i)
test_i  <- subset(train, !(FOLDS %in% i))
M <- bagging(form, train_i, ntrees=ntrees, pruning=pruning, dselection=dselection, pruning_cp=pruning_cp)
preds <- predict(M, test_i)
trues <- test_i[, get_target(form)]
kappa_i[i] <- kappa2(cbind(preds, as.character(trues)))$value
}
mean(kappa_i)
}
paramset <- list(ntrees = c(50, 200),
pruning = c(.5, 3.5),
dselection = c(.5, 3.5),
pruning_cp = c(.25, .75))
OPT_Res <- Hyperband(bagging_optim,
maximize = TRUE,
bounds = paramset,
R = 6,
R_unit = 2,
eta = 3,
verbose = T)
bagging_optim
Hyperband
train
test
train <- iris[1:(.7*nrow(iris)), ]
test  <- iris[-c(1:(.7*nrow(iris))), ]
form <- Species ~.
OPT_Res <- Hyperband(bagging_optim,
maximize = TRUE,
bounds = paramset,
R = 6,
R_unit = 2,
eta = 3,
verbose = T)
"hyper_pipeline" <-
function(form, train, test) {
"bagging_optim" <-
function(r, ntrees, pruning, dselection, pruning_cp) {
nfolds <- 4
set.seed(1)
pruning <- as.character(round(pruning, 0L))
pruning <- switch(pruning, "1" = "none", "2" = "none", "3" = "mdsq")
dselection <- as.character(round(dselection, 0L))
dselection <- switch(dselection, "1" = "none", "2" = "ola", "3" = "knora-e")
print(paste(ntrees,pruning,dselection, pruning_cp))
FOLDS <- createFolds(train$Species, list = FALSE, k = nfolds)
kappa_i <- numeric(nfolds)
for (i in seq_along(kappa_i)) {
train_i <- subset(train, FOLDS %in% i)
test_i  <- subset(train, !(FOLDS %in% i))
M <- bagging(form, train_i, ntrees=ntrees, pruning=pruning, dselection=dselection, pruning_cp=pruning_cp)
preds <- predict(M, test_i)
trues <- test_i[, get_target(form)]
kappa_i[i] <- kappa2(cbind(preds, as.character(trues)))$value
}
mean(kappa_i)
}
t0 <- Sys.time()
paramset <- list(ntrees = c(50, 200),
pruning = c(.5, 3.5),
dselection = c(.5, 3.5),
pruning_cp = c(.25, .75))
OPT_Res <- Hyperband(bagging_optim,
maximize = TRUE,
bounds = paramset,
R = 6,
R_unit = 2,
eta = 3,
verbose = T)
scoreval <- f_pipeline_hb(form, train, test, clean_hyperband_res(OPT_Res))
t1<-Sys.time()
dt <- t1-t0
list(score = scoreval, deltat = dt)
}
hb <- hyper_pipeline(Species ~., train, test)
hb
load("../err_data_bb.rdata")
ls()
bb
autoBagging:::bb()
autoBagging:::bb
autoBagging:::bb(Species ~., )
ls()
autoBagging:::bb(Species ~., preds, data, .3)
prunedN <- ceiling(ncol(preds) - (ncol(preds) * cutPoint))
weights <- rep(1/nrow(data), nrow(data))
ordem <- NULL
class <- get_target(Species ~.)
errors <- apply(preds, 2, function(x) {sum(((!(x == data[,class])) * 1) * weights)})
errors[ordem] <- max(errors) * 2
for (l in 1:prunedN) {
errors <- apply(preds, 2, function(x) {sum(((!(x == data[,class])) * 1) * weights)})
print(l)
# hammer time! works fine, though
errors[ordem] <- max(errors) * 2
ordem[l] <- which.min(errors)
errorU <- min(errors)
predU <- preds[,ordem[l]] == data[,class]
if (errorU > 0.5) {
weights <- rep(1/nrow(data), nrow(data))
} else {
for (w in 1:length(weights)) {
weights[w] <- ifelse(predU[w], weights[w] / (2*errorU) , weights[w] / (2 * (1-errorU)) )
}
}
}
library(autoBagging)
autoBagging:::bb
data(iris)
train <- iris[1:(.7*nrow(iris)), ]
test  <- iris[-c(1:(.7*nrow(iris))), ]
form <- Species ~.
"clean_hyperband_res" <-
function(hb_res) {
id <- which.max(hb_res$Value)
best_res <- unlist(hb_res[id, ])
ntrees <- ceiling(best_res[["ntrees"]])
pruning <- as.character(round(best_res[["pruning"]], 0L))
pruning <- switch(pruning, "1" = "none", "2" = "none", "3" = "mdsq")
dselection <- as.character(round(best_res[["dselection"]], 0L))
dselection <- switch(dselection, "1" = "none", "2" = "ola", "3" = "knora-e")
pruning_cp <- round(best_res[["pruning_cp"]], 2)
list(ntrees = ntrees, pruning = pruning, dselection = dselection, pruning_cp = pruning_cp)
}
###
"f_pipeline_hb" <-
function(form, train, test, hb_res) {
M <-     bagging(form = form,
data = train,
ntrees = hb_res$ntrees,
pruning = hb_res$pruning,
dselection = hb_res$dselection,
pruning_cp = hb_res$pruning_cp)
preds <- predict(M, test)
trues <- as.character(test[, get_target(form)])
kappa2(cbind(preds, trues))$value
}
"hyper_pipeline" <-
function(form, train, test) {
"bagging_optim" <-
function(r, ntrees, pruning, dselection, pruning_cp) {
nfolds <- 4
set.seed(1)
pruning <- as.character(round(pruning, 0L))
pruning <- switch(pruning, "1" = "none", "2" = "none", "3" = "mdsq")
dselection <- as.character(round(dselection, 0L))
dselection <- switch(dselection, "1" = "none", "2" = "ola", "3" = "knora-e")
print(paste(ntrees,pruning,dselection, pruning_cp))
FOLDS <- createFolds(train$Species, list = FALSE, k = nfolds)
kappa_i <- numeric(nfolds)
for (i in seq_along(kappa_i)) {
train_i <- subset(train, FOLDS %in% i)
test_i  <- subset(train, !(FOLDS %in% i))
M <- bagging(form, train_i, ntrees=ntrees, pruning=pruning, dselection=dselection, pruning_cp=pruning_cp)
preds <- predict(M, test_i)
trues <- test_i[, get_target(form)]
kappa_i[i] <- kappa2(cbind(preds, as.character(trues)))$value
}
mean(kappa_i)
}
t0 <- Sys.time()
paramset <- list(ntrees = c(50, 200),
pruning = c(.5, 3.5),
dselection = c(.5, 3.5),
pruning_cp = c(.25, .75))
OPT_Res <- Hyperband(bagging_optim,
maximize = TRUE,
bounds = paramset,
R = 6,
R_unit = 2,
eta = 3,
verbose = T)
scoreval <- f_pipeline_hb(form, train, test, clean_hyperband_res(OPT_Res))
t1<-Sys.time()
dt <- t1-t0
list(score = scoreval, deltat = dt)
}
hb <- hyper_pipeline(Species ~., train, test)
library(autoBagging)
library(rHyperband)
library(irr)
library(caret)
load("../err_data_bb.rdata")
autoBagging:::bb(Species ~., preds, data, .3)
autoBagging:::bb(Species ~., preds, data, .3)
#' Boosting-based pruning of models
#'
#' @param form formula
#' @param preds predictions in training data
#' @param data training data
#' @param cutPoint ratio of the total number of models to cut off
bb <- function (form, preds, data, cutPoint) {
class <- get_target(form)
prunedN <- ceiling(ncol(preds) - (ncol(preds) * cutPoint))
weights <- rep(1/nrow(data), nrow(data))
ordem <- NULL
for (l in 1:prunedN) {
errors <- apply(preds, 2, function(x) {sum(((!(x == data[,class])) * 1) * weights)})
# hammer time! works fine, though
errors[ordem] <- max(errors) * 2
ordem[l] <- which.min(errors)
errorU <- min(errors)
predU <- preds[,ordem[l]] == data[,class]
if (errorU > 0.5) {
weights <- rep(1/nrow(data), nrow(data))
} else {
for (w in 1:length(weights)) {
weights[w] <- ifelse(predU[w], weights[w] / (2*errorU) , weights[w] / (2 * (1-errorU)) )
}
}
weights <- sapply(weights, function(x) {
ifelse(x > 10.000e+300, 10.000e+300, x)
})
}
return(ordem)
}
#' Margin Distance Minimization
#'
#' @inheritParams bb
mdsq <- function (form, preds, data, cutPoint) {
class <- get_target(form)
prunedN <- ceiling(ncol(preds) - (ncol(preds) * cutPoint))
ordem <- as.vector(NULL)
pred <- ifelse(preds == data[,class], 1, -1)
ens <- rep(0, length(data[,class]))
colnames(pred) <- 1:ncol(pred)
o <- rep(0.075, length(data[,class]))
for (l in 1:prunedN) {
dist <- apply(as.matrix(pred), 2, function (x) {sqrt( sum( ( ((x+as.vector(ens))/l) - o )^2 ) )})
ens <- as.matrix(ens) + as.matrix(pred[,c(names(which.min(dist)))])
pred <- as.matrix(pred[,setdiff(colnames(pred),names(which.min(dist)))])
ordem[l] <- as.integer(names(which.min(dist)))
}
return(ordem)
}
bb(Species ~., preds, data, .3)
source("../hyperband-src.r")
rm(list=ls())
list.files()
list.files("../../pythonExperiments/pythonDatasets/")
dir <- "../../pythonExperiments/pythonDatasets/"
lf <- list.files("../../pythonExperiments/pythonDatasets/")
lf
lf <- lf[-141]
lf
res_hb <- list()
lf[1]
dataset <-read.csv(paste0(dir, lf[1]))
dataset
dataset <- read.csv(paste0(dir, lf[1]), header = FALSE)
dataset
colnames(dataset)
length(dataset)
colnames(dataset)[length(dataset)] <- "class"
dataset
dataset <- read.csv(paste0(dir, lf[1]), header = FALSE)
colnames(dataset)[length(dataset)] <- "class"
dataset <- transform(dataset, class = factor(class))
source("../hyperband-src.r")
hyper_pipeline
hyper_pipeline
hb <- hyper_pipeline(class ~., dataset)
hb
library(autoBagging)
library(rHyperband)
library(irr)
install.packages("devtools")
devtools::install_github("yanyachen/rHyperband")
install.packages("irr")
library(rHyperband)
library(irr)
library(caret)
source("../hyperband-src.r")
dir <- "../../pythonExperiments/pythonDatasets/"
lf <- list.files("../../pythonExperiments/pythonDatasets/")
lf
lf <- lf[-141]
form <- class ~.
dataset <- read.csv(paste0(dir, lf[1]), header = FALSE)
dim(dataset)
colnames(dataset)[length(dataset)] <- "class"
dataset <- transform(dataset, class = factor(class))
res_bh <- hyper_pipeline(class ~., dataset)
dataset <- iris
res_bh <- hyper_pipeline(Species ~., dataset)
dataset
colnames(dataset)
colnames(dataset)[length(dataset)] <- "class"
res_bh <- hyper_pipeline(class ~., dataset)
res_bh
source("../hyperband-src.r")
res_bh <- hyper_pipeline(class ~., dataset)
library(autoBagging)
source("../hyperband-src.r")
res_bh <- hyper_pipeline(class ~., dataset)
res_bh
runif(1,50,200)
runif(1,50,200)
runif(1,50,200)
runif(1,50,200)
runif(1,50,200)
runif(1,50,200)
runif(1,50,200)
runif(1,50,200)
runif(1,50,200)
runif(1,50,200)
runif(1,50,200)
nt_r <- runif(1,50,200)
nt_r - c(50, 100, 200)
nt_r
c("50" = 50, "100" = 100, "200" = 200)
nt_r - c("50" = 50, "100" = 100, "200" = 200)
nt_r <- runif(1,50,200)
nt_r - c("50" = 50, "100" = 100, "200" = 200)
nt_r
nt_r - c("50" = 50, "100" = 100, "200" = 200)
abs(nt_r - c("50" = 50, "100" = 100, "200" = 200))
which.min(abs(nt_r - c("50" = 50, "100" = 100, "200" = 200)))
names(which.min(abs(nt_r - c("50" = 50, "100" = 100, "200" = 200))))
as.numeric(names(which.min(abs(nt_r - c("50" = 50, "100" = 100, "200" = 200)))))
ntrees_c <- which.min(abs(nt_r - c("50" = 50, "100" = 100, "200" = 200)))
ntrees <- as.numeric(names(ntrees_c))
pruning_cp_r <- runif(1, .25, .75)
pruning_cp_r
pruning_cp_c <- which.min(abs(pruning_cp_r - c(".25" = .25, ".5" = .5, ".75" = .75)))
pruning_cp_c
pruning_cp <- as.numeric(names(pruning_cp_c))
pruning_cp
t0<-Sys.time()
t1<-Sys.time()
difftime(t1,t0, units = "secs")
difftime(t1,t0, units = "mins")
source("../hyperband-src.r")
res_bh <- hyper_pipeline(class ~., dataset)
res_bh_f <- hyper_pipeline_fixed(class ~., dataset)
source("../hyperband-src.r")
res_bh <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
res_bh <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
res_bh <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
res_bh <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
res_bh <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
res_bh <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
res_bh <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
res_bh <- hyper_pipeline(class ~., dataset)
r1
source("../hyperband-src.r")
res_bh <- hyper_pipeline(class ~., dataset)
r1
iris
r1
dim(iris)
dim(iris)
r1 <- round(r1, 0)
r1 / 100
sample(x = 1:100, size = r1 / 100, replace = FALSE)
sample(x = 1:nrow(iris), size = (r1 / 100) * nrow(iris), replace = FALSE)
sample(x = 1:nrow(iris), size = (r1 / 100) * nrow(iris), replace = FALSE)
sample(x = 1:nrow(iris), size = (r1 / 100) * nrow(iris), replace = FALSE)
sample(x = 1:nrow(iris), size = (r1 / 100) * nrow(iris), replace = FALSE)
sample(x = 1:nrow(iris), size = (r1 / 100) * nrow(iris), replace = FALSE)
sample(x = 1:nrow(iris), size = (r1 / 100) * nrow(iris), replace = FALSE)
sample(x = 1:nrow(iris), size = (r1 / 100) * nrow(iris), replace = FALSE)
sample(x = 1:nrow(iris), size = (r1 / 100) * nrow(iris), replace = FALSE)
sample(x = 1:nrow(iris), size = (r1 / 100) * nrow(iris), replace = FALSE)
sample(x = 1:nrow(iris), size = (r1 / 100) * nrow(iris), replace = FALSE)
source("../hyperband-src.r")
res_bh <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
res_bh <- hyper_pipeline(class ~., dataset)
train
train1
r <- round(r1, 0)
train<-train1
resource <- sample(x = 1:nrow(train),
size = (r / 100) * nrow(train),
replace = FALSE)
resource
train <- train[resource, ]
train
res_bh <- hyper_pipeline(class ~., dataset)
ls()
data1
r1
source("../hyperband-src.r")
res_bh <- hyper_pipeline(class ~., dataset)
res_bh <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
res_bh <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
res_bh <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
res_bh <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
res_bh <- hyper_pipeline(class ~., dataset)
res_bh
source("../hyperband-src.r")
dataset <- iris
colnames(dataset)[length(dataset)] <- "class"
res_bh <- hyper_pipeline(class ~., dataset)
rm(list=ls())
source("../hyperband-src.r")
dataset <- iris
colnames(dataset)[length(dataset)] <- "class"
res_bh_f <- hyper_pipeline_fixed(class ~., dataset)
source("../hyperband-src.r")
res_bh   <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
res_bh   <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
res_bh   <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
res_bh   <- hyper_pipeline(class ~., dataset)
hb_res
res_bh
source("../hyperband-src.r")
res_bh   <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
res_bh   <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
res_bh   <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
source("../hyperband-src.r")
res_bh   <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
res_bh   <- hyper_pipeline(class ~., dataset)
source("../hyperband-src.r")
res_bh   <- hyper_pipeline(class ~., dataset)
res_bh
as.data.frame(res_bh)
as.data.frame(res_bh$score)
source("../hyperband-src.r")
res_bh   <- hyper_pipeline(class ~., dataset)
res_bh
source("../hyperband-src.r")
res_bh   <- hyper_pipeline(class ~., dataset)
res_bh
res_bh_f <- hyper_pipeline_fixed(class ~., dataset)
res_bh
res_bh_f
clean_hyperband_res(res_bh$score)
source("../hyperband-src.r")
clean_hyperband_res(res_bh$score)
library(autoBagging)
