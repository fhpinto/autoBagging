{
    "collab_server" : "",
    "contents" : "library(autoBagging)\nlibrary(rHyperband)\nlibrary(irr)\nlibrary(caret)\n\n\"clean_hyperband_res\" <-\n  function(hb_res) {\n    id <- which.max(hb_res$Value)\n\n    best_res <- unlist(hb_res[id, ])\n\n    ntrees <- ceiling(best_res[[\"ntrees\"]])\n\n    pruning <- as.character(round(best_res[[\"pruning\"]], 0L))\n    pruning <- switch(pruning, \"1\" = \"none\", \"2\" = \"bb\", \"3\" = \"mdsq\")\n    dselection <- as.character(round(best_res[[\"dselection\"]], 0L))\n    dselection <- switch(dselection, \"1\" = \"none\", \"2\" = \"ola\", \"3\" = \"knora-e\")\n\n    pruning_cp <- round(best_res[[\"pruning_cp\"]], 2)\n\n\n    list(Value=max(hb_res$Value), ntrees = ntrees, pruning = pruning, dselection = dselection, pruning_cp = pruning_cp)\n  }\n###\n\n\"f_pipeline_hb\" <-\n  function(form, train, test, hb_res) {\n    M <-     bagging(form = form,\n                     data = train,\n                     ntrees = hb_res$ntrees,\n                     pruning = hb_res$pruning,\n                     dselection = hb_res$dselection,\n                     pruning_cp = hb_res$pruning_cp)\n\n    preds <- predict(M, test)\n\n    trues <- as.character(test[, get_target(form)])\n\n    kappa2(cbind(preds, trues))$value\n  }\n\n\n\"hyper_pipeline\" <-\n  function(form, train, test) {\n    \"bagging_optim\" <-\n      function(r, ntrees, pruning, dselection, pruning_cp) {\n        nfolds <- 4\n        set.seed(1)\n\n        r <- round(r, 0)\n        r <- min(r, 100)\n        r <- max(r, 15)\n\n        resource <- sample(x = 1:nrow(train),\n                           size = (r / 100) * nrow(train),\n                           replace = FALSE)\n\n        train <- train[resource, ]\n\n        pruning <- as.character(round(pruning, 0L))\n        pruning <- switch(pruning, \"1\" = \"none\", \"2\" = \"bb\", \"3\" = \"mdsq\")\n\n        dselection <- as.character(round(dselection, 0L))\n        dselection <- switch(dselection, \"1\" = \"none\", \"2\" = \"ola\", \"3\" = \"knora-e\")\n\n        print(paste(ntrees,pruning,dselection, pruning_cp))\n\n        FOLDS <- createFolds(train$class, list = FALSE, k = nfolds)\n        kappa_i <- numeric(nfolds)\n\n        for (i in seq_along(kappa_i)) {\n          train_i <- subset(train, FOLDS %in% i)\n          test_i  <- subset(train, !(FOLDS %in% i))\n\n          M <- bagging(form, train_i, ntrees=ntrees, pruning=pruning, dselection=dselection, pruning_cp=pruning_cp)\n          preds <- predict(M, test_i)\n          trues <- test_i[, get_target(form)]\n\n          kappa_i[i] <- kappa2(cbind(preds, as.character(trues)))$value\n        }\n        mean(kappa_i)\n      }\n\n    t0 <- Sys.time()\n    paramset <- list(ntrees = c(50, 200),\n                     pruning = c(.5, 3.5),\n                     dselection = c(.5, 3.5),\n                     pruning_cp = c(.25, .75))\n\n    OPT_Res <- Hyperband(bagging_optim,\n                         maximize = TRUE,\n                         bounds = paramset,\n                         R = 100,\n                         R_unit = 10,\n                         eta = 4,\n                         verbose = T)\n\n    #scoreval <- f_pipeline_hb(form, train, test, clean_hyperband_res(OPT_Res))\n    scoreval <- clean_hyperband_res(OPT_Res)\n    t1<-Sys.time()\n    dt <- difftime(t1, t0, units = \"mins\")\n\n    list(score = scoreval$Value, deltat = dt, workflow = scoreval[-1])\n  }\n\n\"hyper_pipeline_fixed\" <-\n  function(form, train, test) {\n    \"bagging_optim_fixed\" <-\n      function(r, ntrees, pruning, dselection, pruning_cp) {\n        nfolds <- 4\n        set.seed(1)\n\n        r <- round(r, 0)\n        r <- min(r, 100)\n        r <- max(r, 15)\n\n        resource <- sample(x = 1:nrow(train),\n                           size = (r / 100) * nrow(train),\n                           replace = FALSE)\n\n        train <- train[resource, ]\n\n        ntrees_c <- which.min(abs(ntrees - c(\"50\" = 50, \"100\" = 100, \"200\" = 200)))\n        ntrees <- as.numeric(names(ntrees_c))\n\n        pruning_cp_c <- which.min(abs(pruning_cp - c(\".25\" = .25, \".5\" = .5, \".75\" = .75)))\n        pruning_cp <- as.numeric(names(pruning_cp_c))\n\n        pruning <- as.character(round(pruning, 0L))\n        pruning <- switch(pruning, \"1\" = \"none\", \"2\" = \"bb\", \"3\" = \"mdsq\")\n\n        dselection <- as.character(round(dselection, 0L))\n        dselection <- switch(dselection, \"1\" = \"none\", \"2\" = \"ola\", \"3\" = \"knora-e\")\n\n        #print(paste(ntrees,pruning,dselection, pruning_cp))\n\n        FOLDS <- createFolds(train$class, list = FALSE, k = nfolds)\n        kappa_i <- numeric(nfolds)\n\n        for (i in seq_along(kappa_i)) {\n          train_i <- subset(train, FOLDS %in% i)\n          test_i  <- subset(train, !(FOLDS %in% i))\n\n          M <- bagging(form, train_i, ntrees=ntrees, pruning=pruning, dselection=dselection, pruning_cp=pruning_cp)\n          preds <- predict(M, test_i)\n          trues <- test_i[, get_target(form)]\n\n          kappa_i[i] <- kappa2(cbind(preds, as.character(trues)))$value\n        }\n        mean(kappa_i)\n      }\n\n    t0 <- Sys.time()\n    paramset <- list(ntrees = c(50, 200),\n                     pruning = c(.5, 3.5),\n                     dselection = c(.5, 3.5),\n                     pruning_cp = c(.25, .75))\n\n    OPT_Res <- Hyperband(bagging_optim_fixed,\n                         maximize = TRUE,\n                         bounds = paramset,\n                         R = 100,\n                         R_unit = 10,\n                         eta = 4,\n                         verbose = T)\n\n    #scoreval <- f_pipeline_hb(form, train, test, clean_hyperband_res(OPT_Res))\n    scoreval <- clean_hyperband_res(OPT_Res)\n    t1 <- Sys.time()\n    dt <- difftime(t1, t0, units = \"mins\")\n\n    list(score = scoreval$Value, deltat = dt, workflow = scoreval[-1])\n  }\n",
    "created" : 1501074563102.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2393222476",
    "id" : "EAA5E908",
    "lastKnownWriteTime" : 1501261220,
    "last_content_update" : 1501261220223,
    "path" : "~/Dropbox/AutoFuckingBagging/package/hyperband-src.r",
    "project_path" : null,
    "properties" : {
        "source_window_id" : "wmi36bq76s6lu"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}