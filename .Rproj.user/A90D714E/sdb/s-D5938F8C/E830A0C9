{
    "collab_server" : "",
    "contents" : "data(sysdata, envir=environment())\n\n#' Retrieve the value of a previously computed measure\n#'\n#' @param inDCName name of data characteristics\n#' @param inDCSet set of data characteristics already computed\n#' @param component.name name of component (e.g. time or value) to\n#' retrieve; if NULL retrieve all.\n#'\n#' @return simple or structured value\n#'\n#' @note if measure is not available, stop execution with error\nGetMeasure <- function(inDCName, inDCSet, component.name = \"value\") {\n  if (is.null(inDCSet$value[[inDCName]]))\n    stop(message = \"WARNING: requires uncomputed measure (\", inDCName, \")\")\n\n  if (is.null(component.name))\n    inDCSet[[inDCName]]\n  else\n    inDCSet[[component.name]][[inDCName]]\n}\n\n#' Retrieve names of symbolic attributes (not including the target)\n#'\n#' @param dataset structure describing the data set, according\n#' to \\code{read_data.R}\n#'\n#' @seealso read_data.R\n#'\n#' @return list of strings\nSymbAttrs <- function(dataset) {\n  attDF <- dataset[[1]]$attributes\n\n  cond <- (attDF$attr.type != \"continuous\") & (attDF$attr.name != attDF$target.attr)\n\n  attDF$attr.name[cond]\n  # dataset[[1]]$attributes$attr.name[(dataset[[1]]$attributes$attr.type != \"continuous\") &\n  #                                   (dataset[[1]]$attributes$attr.name != dataset[[1]]$attributes$target.attr)]\n}\n\n#' Retrieve names of continuous attributes\n#'\n#' @inheritParams SymbAttrs\n#'\n#' @seealso read_data.R\n#'\n#' @return list of strings\nContAttrs <- function(dataset) {\n  attDF <- dataset[[1]]$attributes\n\n  cond <- (attDF$attr.type == \"continuous\") & (attDF$attr.name != attDF$target.attr)\n\n  attDF$attr.name[cond]\n  # dataset[[1]]$attributes$attr.name[(dataset[[1]]$attributes$attr.type == \"continuous\") &\n  #                                   (dataset[[1]]$attributes$attr.name != dataset[[1]]$attributes$target.attr)]\n}\n\n#' FUNCTION TO TRANSFORM DATA FRAME INTO LIST WITH GSI REQUIREMENTS\n#'\n#' @param dat data frame\n#'\n#' @return a list containing components that describe\n#' the names (see ReadtAttrsInfo) and the data (see ReadData) files\nReadDF <- function(dat) {\n  # Determine attribute types\n  wkNamesFile <- lapply(dat, function(attr) {\n    if (is.numeric(attr)) {\n      \"continuous\"\n    } else if (is.factor(attr)) {\n      levels(attr)\n    } else {\n      \"error\"\n    }\n  })\n\n  names(wkNamesFile)[length(wkNamesFile)] <- c(\"class\")\n\n  wkDataset <- alist()\n  class(wkDataset) <- \"dataset\"\n\n  target.attr <- names(wkNamesFile)[length(wkNamesFile)]\n  original.attr.name <- names(wkNamesFile)\n  attr.name <- names(wkNamesFile)\n  attr.type <- wkNamesFile\n  problem.type <- \"classification\"\n\n  wkNamesFile <- list(namesfile = c(\"datafile\"),\n                      attributes = list(target.attr = target.attr,\n                                        problem.type = problem.type,\n                                        attr.name = attr.name,\n                                        original.name = original.attr.name,\n                                        attr.type = attr.type))\n\n  colnames(dat) <- original.attr.name\n  rownames(dat) <- NULL\n\n  return(list(wkNamesFile, list(data.file = \"datafile\", frame = dat)))\n}\n\n\nCharacterizeDF <- function(df, dc.measures) {\n  wkDCSet <- list(value = list())\n  wkDataSet <- ReadDF(df)\n\n  for (wkMeasure in dc.measures$measures) {\n    if (is.null(wkDCSet$value[[wkMeasure]])) {\n      wkValue <- do.call(wkMeasure, list(wkDataSet, wkDCSet))\n      wkDCSet$value[[wkMeasure]] <- wkValue\n    }\n  }\n  wkDCSet\n}\n\nmeta.dataframe <- function(dat, metaf) {\n  CDF <- CharacterizeDF(dat, sysdata$kCompleteClassificationGSI)\n\n  metaframe <- vector(\"list\", length(metaf))\n  for (i in seq_along(metaf)) {\n    metaframe[i] <- CDF$value[grep(metaf[[i]], names(CDF$value))][1]\n  }\n  names(metaframe) <- metaf\n\n  metaframe\n}\n\n",
    "created" : 1499242951678.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "268768525",
    "id" : "E830A0C9",
    "lastKnownWriteTime" : 1499245289,
    "last_content_update" : 1499245444414,
    "path" : "~/Dropbox/AutoFuckingBagging/package/autoBagging/R/metafeats-utils.r",
    "project_path" : "R/metafeats-utils.r",
    "properties" : {
        "source_window_id" : "w8ntv0el2qy0q"
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}