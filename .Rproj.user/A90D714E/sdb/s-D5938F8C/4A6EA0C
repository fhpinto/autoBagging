{
    "collab_server" : "",
    "contents" : "data(sysdata, envir=environment())\n\n#' autoBagging\n#'\n#' Learning to Rank Bagging Workflows with Metalearning\n#'\n#' @param form formula. Currently supporting only categorical target\n#' variables (classification tasks)\n#' @param data training dataset with a categorical target variable\n#'\n#'\n#' @seealso \\code{\\link{bagging}} for the bagging pipeline with a specific\n#' workflow; \\code{\\link{baggedtrees}} for the bagging implementation;\n#' \\code{\\link{abmodel-class}} for the returning class object.\n#'\n#' @return an \\code{abmodel} class object\n#'\n#' @references Pinto, F., Cerqueira, V., Soares, C., Mendes-Moreira, J.:\n#' \"autoBagging: Learning to Rank Bagging Workflows\n#' with Metalearning\" arXiv preprint arXiv:1706.09367 (2017).\n#'\n#' @examples\n#' \\dontrun{\n#' # splitting an example dataset into train/test:\n#' train <- iris[1:(.7*nrow(iris)), ]\n#' test <- iris[-c(1:(.7*nrow(iris))), ]\n#' # then apply autoBagging to the train, using the desired formula:\n#' # autoBagging will compute metafeatures on the dataset\n#' # and apply a pre-trained ranking model to recommend a workflow.\n#' model <- autoBagging(Species ~., train)\n#' # predictions are produced with the standard predict method\n#' preds <- predict(model, test)\n#' }\n#' @import xgboost\n#'\n#' @export\nautoBagging <- function(form, data) {\n  if (!class(data[, get_target(form)]) %in% c(\"factor\", \"character\")) {\n    stop(\"autoBagging currently only supports classification tasks.\n       Check your target variable in the formula provided.\", call. = FALSE)\n  }\n\n  if (nrow(data) > 100000L)\n    warning(\"Very large datasets are out of the scope\n             of the experimental setup\n             used to validate autoBagging.\n             Check references for further information.\",\n            call. = FALSE)\n  cat(\"Sit tight, relax and enjoy your coffee. autoBagging is working for you!\\n\\n\")\n\n  id <- sample(1:7, 1)\n  if (id == 1) {\n    cat(\"https://www.youtube.com/watch?v=n2_X4VTCoEo\\n\\n\")\n  } else if (id == 2) {\n    cat(\"https://www.youtube.com/watch?v=hMr3KtYUCcI\\n\\n\")\n  } else if (id == 3) {\n    cat(\"https://www.youtube.com/watch?v=ZzlgJ-SfKYE\\n\\n\")\n  } else if (id == 4) {\n    cat(\"https://www.youtube.com/watch?v=2Gn9A-kdsRo\\n\\n\")\n  } else if (id == 5) {\n    cat(\"https://www.youtube.com/watch?v=ZDwotNLyz10\\n\\n\")\n  } else if (id == 6) {\n    cat(\"https://www.youtube.com/watch?v=g2N0TkfrQhY\\n\\n\")\n  } else if (id == 7) {\n    cat(\"https://www.youtube.com/watch?v=gEPmA3USJdI\\n\\n\")\n  }\n\n  #load(\"R/sysdata.rda\")\n  metafeatures_names <- sysdata$metafeatures_names\n  MaxMinMetafeatures <- sysdata$MaxMinMetafeatures\n  Xtest <- sysdata$Xtest\n  metamodel <- sysdata$metamodel\n\n  meta.example <- meta.dataframe(data, metafeatures_names)\n\n  for (i in colnames(Xtest)[1:143]) {\n    max_value <- MaxMinMetafeatures[MaxMinMetafeatures[, 1] == i, 2]\n    min_value <- MaxMinMetafeatures[MaxMinMetafeatures[, 1] == i, 3]\n    meta.example[[i]] <-  ifelse(is.finite(normalize01(meta.example[[i]],\n                                                       max_value,\n                                                       min_value)),\n                                 normalize01(meta.example[[i]],\n                                             max_value,\n                                             min_value), -1)\n\n    Xtest[,i] <- meta.example[[i]]\n  }\n\n  X <- xgboost::xgb.DMatrix(data = data.matrix(Xtest),  group = c(63), missing = -1)\n\n  meta.model <- xgboost::xgb.load(metamodel)\n\n  meta.pred <- cbind(as.data.frame(Xtest), predict(meta.model, X))\n  colnames(meta.pred)[ncol(meta.pred)] <- \"meta.pred\"\n\n  cat(\"Your recommended workflow is...\\n\\n\")\n  RecWF <- cleanRecWF(meta.pred[which.max(meta.pred$meta.pred),\n                                (ncol(meta.pred)-13):ncol(meta.pred)])\n\n  catWF(RecWF)\n  cat('################################\\n\\n')\n  cat('Training recommended workflow...\\n\\n')\n\n  bagging(form = form,\n          data = data,\n          ntrees = RecWF$nTrees,\n          pruning = RecWF$pruningMethods,\n          dselection = RecWF$dynamicMethods,\n          pruning_cp = RecWF$pruningCutPoint)\n}\n",
    "created" : 1498927925878.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3127756873",
    "id" : "4A6EA0C",
    "lastKnownWriteTime" : 1498927979,
    "last_content_update" : 1498927979246,
    "path" : "~/Dropbox/AutoFuckingBagging/package/autoBagging/R/autoBagging-pipeline.r",
    "project_path" : "R/autoBagging-pipeline.r",
    "properties" : {
        "source_window_id" : "w8ntv0el2qy0q"
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}