{
    "collab_server" : "",
    "contents" : "attr.correlation <- function(dataset, data.char) {\n  wkContAttrs <- ContAttrs(dataset)\n  attr.correlation <- NA\n\n  if (length(wkContAttrs) > 0) {\n    cm <- cor(dataset[[2]]$frame[, wkContAttrs], use = \"pairwise.complete.obs\")\n    xx <- rep(1:length(wkContAttrs), times=1:length(wkContAttrs)-1)\n    yy <- unlist(sapply(2:length(wkContAttrs)-1, function(x) {1:x}))\n    attr.correlation <- sapply(1:length(xx), function(x,m,xx,yy) {m[xx[x],yy[x]]}, cm, xx, yy)\n    names(attr.correlation) <- sapply(1:length(xx), function(x, xx, yy) {paste(xx[x], yy[x], sep=\"_\")}, xx, yy)\n  }\n\n  attr.correlation[is.na(attr.correlation)] <- 0\n  attr.correlation\n}\n\navg.abs.attr.correlation <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.correlation\", data.char)\n  mean(abs(ac[!is.na(ac)]))\n}\n\nmin_abs.attr.correlation <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.correlation\", data.char)\n  min(abs(ac[! is.na(ac)]))\n}\n\nmax_abs.attr.correlation <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.correlation\", data.char)\n  max(abs(ac[! is.na(ac)]))\n}\n\nsd_abs.attr.correlation <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.correlation\", data.char)\n  sd(abs(ac[! is.na(ac)]))\n}\n\nvar_abs.attr.correlation <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.correlation\", data.char)\n  var(abs(ac[! is.na(ac)]))\n}\n\nhist_attr.correlation <- function(dataset, data.char) {\n  x <- na.omit(range01(na.omit(as.numeric(GetMeasure(\"attr.correlation\", data.char)))))\n  aux <- NULL\n\n  if (length(x) == 0) {\n    aux <- NA\n  } else {\n    aux <- hist(x,breaks=seq(from=min(x), to=max(x), by=(max(x)-min(x))/10), plot = FALSE)$counts\n  }\n\n  aux\n}\n\nhist_attr.correlation.bin1 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.correlation\", data.char))[1]\n}\n\nhist_attr.correlation.bin2 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.correlation\", data.char))[2]\n}\n\nhist_attr.correlation.bin3 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.correlation\", data.char))[3]\n}\n\nhist_attr.correlation.bin4 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.correlation\", data.char))[4]\n}\n\nhist_attr.correlation.bin5 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.correlation\", data.char))[5]\n}\n\nhist_attr.correlation.bin6 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.correlation\", data.char))[6]\n}\n\nhist_attr.correlation.bin7 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.correlation\", data.char))[7]\n}\n\nhist_attr.correlation.bin8 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.correlation\", data.char))[8]\n}\n\nhist_attr.correlation.bin9 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.correlation\", data.char))[9]\n}\n\nhist_attr.correlation.bin10 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.correlation\", data.char))[10]\n}\n\nclass.entropy <- function(dataset, data.char) {\n  class.rel.freq <- GetMeasure(\"class.rel.freq\", data.char)\n\n  -sum(as.numeric(subset(class.rel.freq, class.rel.freq!=0)) * Log2(as.numeric(subset(class.rel.freq, class.rel.freq!=0))))\n}\n\navg.attr.entropy <- function(dataset, data.char) {\n  mean(as.numeric(GetMeasure(\"attr.entropy\", data.char)))\n}\n\nmax_attr.entropy <- function(dataset, data.char) {\n  max(as.numeric(GetMeasure(\"attr.entropy\", data.char)))\n}\n\nmin_attr.entropy <- function(dataset, data.char) {\n  min(as.numeric(GetMeasure(\"attr.entropy\", data.char)))\n}\n\nvar_attr.entropy <- function(dataset, data.char) {\n  var(as.numeric(GetMeasure(\"attr.entropy\", data.char)))\n}\n\nsd_attr.entropy <- function(dataset, data.char) {\n  sd(as.numeric(GetMeasure(\"attr.entropy\", data.char)))\n}\n\nhist_attr.entropy <- function(dataset, data.char) {\n  x <- GetMeasure(\"attr.entropy\", data.char)\n  x <- range01(na.omit(as.numeric(x)))\n\n  if (length(na.omit(x)) == 0) {\n    return(NA)\n  } else {\n    return(hist(x,breaks=seq(from=min(x), to=max(x), by=(max(x)-min(x))/10), plot = FALSE)$counts)\n  }\n}\n\nhist_attr.entropy.bin1 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.entropy\", data.char))[1]\n}\n\nhist_attr.entropy.bin2 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.entropy\", data.char))[2]\n}\n\nhist_attr.entropy.bin3 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.entropy\", data.char))[3]\n}\n\nhist_attr.entropy.bin4 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.entropy\", data.char))[4]\n}\n\nhist_attr.entropy.bin5 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.entropy\", data.char))[5]\n}\n\nhist_attr.entropy.bin6 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.entropy\", data.char))[6]\n}\n\nhist_attr.entropy.bin7 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.entropy\", data.char))[7]\n}\n\nhist_attr.entropy.bin8 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.entropy\", data.char))[8]\n}\n\nhist_attr.entropy.bin9 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.entropy\", data.char))[9]\n}\n\nhist_attr.entropy.bin10 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.entropy\", data.char))[10]\n}\n\n\neta.values <- function(dataset, data.char) {\n  eta.values <- NULL\n\n  wkContAttrs <- ContAttrs(dataset)\n  if (length(wkContAttrs) > 0) {\n    for (l in 1:length(wkContAttrs)) {\n      anova2 <- aov(dataset[[2]]$frame[,wkContAttrs[l]] ~ dataset[[2]]$frame[,dataset[[1]]$attributes$target.attr])\n      eta.values[l] <- lsr::etaSquared(anova2)[1]\n    }\n  } else {\n    eta.values <- NA\n  }\n  eta.values\n}\n\neta.avg <- function (dataset, data.char) {\n  js <- GetMeasure(\"eta.values\", data.char)\n  mean(js)\n}\n\neta.max <- function (dataset, data.char) {\n  js <- GetMeasure(\"eta.values\", data.char)\n  max(js)\n}\n\neta.min <- function (dataset, data.char) {\n  js <- GetMeasure(\"eta.values\", data.char)\n  min(js)\n}\n\neta.sd <- function (dataset, data.char) {\n  js <- GetMeasure(\"eta.values\", data.char)\n  sd(js)\n}\n\neta.var <- function (dataset, data.char) {\n  js <- GetMeasure(\"eta.values\", data.char)\n  var(js)\n}\n\neta.hist <- function (dataset, data.char) {\n  js <- GetMeasure(\"eta.values\", data.char)\n  x <- na.omit(range01(na.omit(as.numeric(js))))\n  aux <- NULL\n\n  if (length(x) == 0) {\n    aux <- NA\n  } else {\n    if (var(x) != 0) {\n      aux <- hist(x,breaks=seq(from=min(x), to=max(x), by=(max(x)-min(x))/10), plot = FALSE)$counts\n    } else {\n      aux <- hist(x, breaks=10, plot=FALSE)$counts\n    }\n  }\n  aux\n}\n\neta.hist1 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.hist\", data.char))[1]\n}\n\neta.hist2 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.hist\", data.char))[2]\n}\n\neta.hist3 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.hist\", data.char))[3]\n}\n\neta.hist4 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.hist\", data.char))[4]\n}\n\neta.hist5 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.hist\", data.char))[5]\n}\n\neta.hist6 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.hist\", data.char))[6]\n}\n\neta.hist7 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.hist\", data.char))[7]\n}\n\neta.hist8 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.hist\", data.char))[8]\n}\n\neta.hist9 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.hist\", data.char))[9]\n}\n\neta.hist10 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.hist\", data.char))[10]\n}\n\neta.pair.values <- function(dataset, data.char) {\n  eta.values <- NULL\n\n  wkContAttrs <- ContAttrs(dataset)\n  wkSymbAttrs <- SymbAttrs(dataset)\n  if (length(wkContAttrs) > 0 && length(wkSymbAttrs) > 0) {\n    for (l in 1:length(wkContAttrs)) {\n      for (k in 1:length(wkSymbAttrs)) {\n        anova2 = tryCatch({\n          aov(dataset[[2]]$frame[complete.cases(dataset[[2]]$frame),wkContAttrs[l]] ~ dataset[[2]]$frame[complete.cases(dataset[[2]]$frame),wkSymbAttrs[k]])\n        }, error = function(e) {\n          0\n        })\n        if (length(anova2) == 1) {\n          eta.values <- c(eta.values, 0)\n        } else {\n          eta.values <- c(eta.values, lsr::etaSquared(anova2)[1])\n        }\n      }\n    }\n  } else {\n    eta.values <- NA\n  }\n  eta.values\n}\n\neta.pair.avg <- function (dataset, data.char) {\n  js <- GetMeasure(\"eta.pair.values\", data.char)\n  mean(js)\n}\n\neta.pair.max <- function (dataset, data.char) {\n  js <- GetMeasure(\"eta.pair.values\", data.char)\n  max(js)\n}\n\neta.pair.min <- function (dataset, data.char) {\n  js <- GetMeasure(\"eta.pair.values\", data.char)\n  min(js)\n}\n\neta.pair.sd <- function (dataset, data.char) {\n  js <- GetMeasure(\"eta.pair.values\", data.char)\n  sd(js)\n}\n\neta.pair.var <- function (dataset, data.char) {\n  js <- GetMeasure(\"eta.pair.values\", data.char)\n  var(js)\n}\n\neta.pair.hist <- function (dataset, data.char) {\n  js <- GetMeasure(\"eta.pair.values\", data.char)\n  x <- na.omit(range01(na.omit(as.numeric(js))))\n  aux <- NULL\n\n  if (length(x) == 0) {\n    aux <- NA\n  } else {\n    if (var(x) != 0) {\n      aux <- hist(x,breaks=seq(from=min(x), to=max(x), by=(max(x)-min(x))/10), plot = FALSE)$counts\n    } else {\n      aux <- hist(x, breaks=10, plot=FALSE)$counts\n    }\n  }\n  aux\n}\n\neta.pair.hist1 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.pair.hist\", data.char))[1]\n}\n\neta.pair.hist2 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.pair.hist\", data.char))[2]\n}\n\neta.pair.hist3 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.pair.hist\", data.char))[3]\n}\n\neta.pair.hist4 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.pair.hist\", data.char))[4]\n}\n\neta.pair.hist5 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.pair.hist\", data.char))[5]\n}\n\neta.pair.hist6 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.pair.hist\", data.char))[6]\n}\n\neta.pair.hist7 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.pair.hist\", data.char))[7]\n}\n\neta.pair.hist8 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.pair.hist\", data.char))[8]\n}\n\neta.pair.hist9 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.pair.hist\", data.char))[9]\n}\n\neta.pair.hist10 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"eta.pair.hist\", data.char))[10]\n}\n\ngain.ratio.weights <- function (dataset, data.char) {\n  d <- dataset[[2]]$frame\n\n  weights <- CORElearn::attrEval(class ~., data=d, estimator=\"GainRatio\")\n  weights <- weights[is.finite( (weights * 10) / 10 )]\n\n  weights\n}\n\ngain.ratio.weights.avg <- function (dataset, data.char) {\n  js <- GetMeasure(\"gain.ratio.weights\", data.char)\n  mean(js)\n}\n\ngain.ratio.weights.max <- function (dataset, data.char) {\n  js <- GetMeasure(\"gain.ratio.weights\", data.char)\n  max(js)\n}\n\ngain.ratio.weights.min <- function (dataset, data.char) {\n  js <- GetMeasure(\"gain.ratio.weights\", data.char)\n  min(js)\n}\n\ngain.ratio.weights.var <- function (dataset, data.char) {\n  js <- GetMeasure(\"gain.ratio.weights\", data.char)\n  var(js)\n}\n\ngain.ratio.weights.sd <- function (dataset, data.char) {\n  js <- GetMeasure(\"gain.ratio.weights\", data.char)\n  sd(js)\n}\n\ngain.ratio.weights.hist <- function (dataset, data.char) {\n  js <- GetMeasure(\"gain.ratio.weights\", data.char)\n  x <- range01(na.omit(as.numeric(js)))\n  if (length(na.omit(x)) == 0) {\n    return(NA)\n  } else {\n    return(hist(x,breaks=seq(from=min(x), to=max(x), by=(max(x)-min(x))/10), plot = FALSE)$counts)\n  }\n}\n\ngain.ratio.weights.hist1 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"gain.ratio.weights.hist\", data.char))[1]\n}\n\ngain.ratio.weights.hist2 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"gain.ratio.weights.hist\", data.char))[2]\n}\n\ngain.ratio.weights.hist3 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"gain.ratio.weights.hist\", data.char))[3]\n}\n\ngain.ratio.weights.hist4 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"gain.ratio.weights.hist\", data.char))[4]\n}\n\ngain.ratio.weights.hist5 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"gain.ratio.weights.hist\", data.char))[5]\n}\n\ngain.ratio.weights.hist6 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"gain.ratio.weights.hist\", data.char))[6]\n}\n\ngain.ratio.weights.hist7 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"gain.ratio.weights.hist\", data.char))[7]\n}\n\ngain.ratio.weights.hist8 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"gain.ratio.weights.hist\", data.char))[8]\n}\n\ngain.ratio.weights.hist9 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"gain.ratio.weights.hist\", data.char))[9]\n}\n\ngain.ratio.weights.hist10 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"gain.ratio.weights.hist\", data.char))[10]\n}\n\nattr.trio.interinfo <- function(dataset, data.char) {\n  wkSymbAttrs <- SymbAttrs(dataset)\n  interinfo <- NULL\n\n  if (length(wkSymbAttrs) > 2) {\n    trios <- combn(wkSymbAttrs,3)\n    interinfo <- apply(trios,2,function(x){\n      infotheo::interinformation(dataset[[2]]$frame[,x])\n    })\n  } else {\n    interinfo <- NA\n  }\n  interinfo\n}\n\navg.attr.trio.interinfo <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.trio.interinfo\", data.char)\n  mean(ac)\n}\n\nmin_attr.trio.interinfo <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.trio.interinfo\", data.char)\n  min(ac)\n}\n\nmax_attr.trio.interinfo <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.trio.interinfo\", data.char)\n  max(ac)\n}\n\nvar_attr.trio.interinfo <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.trio.interinfo\", data.char)\n  var(ac)\n}\n\nsd_attr.trio.interinfo <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.trio.interinfo\", data.char)\n  sd(ac)\n}\n\nhist_attr.trio.interinfo <- function(dataset, data.char) {\n  if (length(na.omit(GetMeasure(\"attr.trio.interinfo\", data.char))) == 0) {\n    return(NA)\n  } else {\n    return(hist(as.numeric(GetMeasure(\"attr.trio.interinfo\", data.char)), breaks=10, plot=F)$counts)\n  }\n}\n\nhist_attr.trio.interinfo.bin1 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.trio.interinfo\", data.char))[1]\n}\n\nhist_attr.trio.interinfo.bin2 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.trio.interinfo\", data.char))[2]\n}\n\nhist_attr.trio.interinfo.bin3 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.trio.interinfo\", data.char))[3]\n}\n\nhist_attr.trio.interinfo.bin4 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.trio.interinfo\", data.char))[4]\n}\n\nhist_attr.trio.interinfo.bin5 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.trio.interinfo\", data.char))[5]\n}\n\nhist_attr.trio.interinfo.bin6 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.trio.interinfo\", data.char))[6]\n}\n\nhist_attr.trio.interinfo.bin7 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.trio.interinfo\", data.char))[7]\n}\n\nhist_attr.trio.interinfo.bin8 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.trio.interinfo\", data.char))[8]\n}\n\nhist_attr.trio.interinfo.bin9 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.trio.interinfo\", data.char))[9]\n}\n\nhist_attr.trio.interinfo.bin10 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.trio.interinfo\", data.char))[10]\n}\n\nattr.class.trio.interinfo <- function(dataset, data.char) {\n  wkSymbAttrs <- SymbAttrs(dataset)\n  interinfo <- NULL\n\n  if (length(wkSymbAttrs) > 2) {\n    trios <- combn(wkSymbAttrs,2)\n    trios <- rbind(trios, rep(\"class\", ncol(trios)))\n\n    interinfo <- apply(trios,2,function(x){\n      infotheo::interinformation(dataset[[2]]$frame[,x])\n    })\n  } else {\n    interinfo <- NA\n  }\n  interinfo\n}\n\navg.attr.class.trio.interinfo <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.class.trio.interinfo\", data.char)\n  mean(ac)\n}\n\nmin_attr.class.trio.interinfo <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.class.trio.interinfo\", data.char)\n  min(ac)\n}\n\nmax_attr.class.trio.interinfo <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.class.trio.interinfo\", data.char)\n  max(ac)\n}\n\nvar_attr.class.trio.interinfo <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.class.trio.interinfo\", data.char)\n  var(ac)\n}\n\nsd_attr.class.trio.interinfo <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.class.trio.interinfo\", data.char)\n  sd(ac)\n}\n\nhist_attr.class.trio.interinfo <- function(dataset, data.char) {\n  if (length(na.omit(GetMeasure(\"attr.class.trio.interinfo\", data.char))) == 0) {\n    return(NA)\n  } else {\n    return(hist(as.numeric(GetMeasure(\"attr.class.trio.interinfo\", data.char)), breaks=10, plot=F)$counts)\n  }\n}\n\nhist_attr.class.trio.interinfo.bin1 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.class.trio.interinfo\", data.char))[1]\n}\n\nhist_attr.class.trio.interinfo.bin2 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.class.trio.interinfo\", data.char))[2]\n}\n\nhist_attr.class.trio.interinfo.bin3 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.class.trio.interinfo\", data.char))[3]\n}\n\nhist_attr.class.trio.interinfo.bin4 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.class.trio.interinfo\", data.char))[4]\n}\n\nhist_attr.class.trio.interinfo.bin5 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.class.trio.interinfo\", data.char))[5]\n}\n\nhist_attr.class.trio.interinfo.bin6 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.class.trio.interinfo\", data.char))[6]\n}\n\nhist_attr.class.trio.interinfo.bin7 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.class.trio.interinfo\", data.char))[7]\n}\n\nhist_attr.class.trio.interinfo.bin8 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.class.trio.interinfo\", data.char))[8]\n}\n\nhist_attr.class.trio.interinfo.bin9 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.class.trio.interinfo\", data.char))[9]\n}\n\nhist_attr.class.trio.interinfo.bin10 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.class.trio.interinfo\", data.char))[10]\n}\n\n\nattr.mic <- function(dataset, data.char) {\n  wkContAttrs <- ContAttrs(dataset)\n  attr.mic <- NA\n  if (length(wkContAttrs) > 1) {\n    cm <- minerva::mine(dataset[[2]]$frame[complete.cases(dataset[[2]]$frame[,wkContAttrs]), wkContAttrs])$MIC\n    attr.mic <- cm[upper.tri(cm, diag=F)]\n  }\n  attr.mic[is.na(attr.mic)] <- 0\n  attr.mic\n}\n\navg.attr.mic <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.mic\", data.char)\n  mean(ac[! is.na(ac)])\n}\n\nmin_attr.mic <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.mic\", data.char)\n  min(ac[! is.na(ac)])\n}\n\nmax_attr.mic <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.mic\", data.char)\n  max(ac[! is.na(ac)])\n}\n\nvar_attr.mic <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.mic\", data.char)\n  var(ac[! is.na(ac)])\n}\n\nsd_attr.mic <- function(dataset, data.char) {\n  ac <- GetMeasure(\"attr.mic\", data.char)\n  sd(ac[! is.na(ac)])\n}\n\nhist_attr.mic <- function(dataset, data.char) {\n  x <- GetMeasure(\"attr.mic\", data.char)\n  x <- range01(na.omit(as.numeric(x)))\n\n  if (length(na.omit(x)) == 0) {\n    return(NA)\n  } else {\n    return(hist(x,breaks=seq(from=min(x), to=max(x), by=(max(x)-min(x))/10), plot = FALSE)$counts)\n  }\n}\n\nhist_attr.mic.bin1 <- function(dataset, data.char) {\n  as.vector(GetMeasure(\"hist_attr.mic\", data.char))[1]\n}\n\nhist_attr.mic.bin2 <- function(dataset, data.char) {\n  as.vector(GetMeasure(\"hist_attr.mic\", data.char))[2]\n}\n\nhist_attr.mic.bin3 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.mic\", data.char))[3]\n}\n\nhist_attr.mic.bin4 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.mic\", data.char))[4]\n}\n\nhist_attr.mic.bin5 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.mic\", data.char))[5]\n}\n\nhist_attr.mic.bin6 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.mic\", data.char))[6]\n}\n\nhist_attr.mic.bin7 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.mic\", data.char))[7]\n}\n\nhist_attr.mic.bin8 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.mic\", data.char))[8]\n}\n\nhist_attr.mic.bin9 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.mic\", data.char))[9]\n}\n\nhist_attr.mic.bin10 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_attr.mic\", data.char))[10]\n}\n\n\navg.symb.pair.mutual.information <- function(dataset, data.char) {\n  spmi <- GetMeasure(\"symb.pair.mutual.information\", data.char)\n  mean(unlist(spmi))\n}\n\nres.symb.pair.mutual.information <- function(dataset, data.char) {\n  spmi <- GetMeasure(\"symb.pair.mutual.information\", data.char)\n\n  rspmi <- NA\n  if (! is.na(spmi)) {\n    attr.entr <- GetMeasure(\"attr.entropy\", data.char)\n    rspmi <- sapply(names(spmi), function(a1, mi, ae) {\n      as.list(sapply(names(mi[[a1]]), function(a2, a1, mi, ae)\n      {\n        mi[[a1]][[a2]] / min(ae[[a1]], ae[[a2]])\n      }, a1, mi, ae))\n    }, spmi, attr.entr)\n  }\n  rspmi\n}\n\navg.res.symb.pair.mutual.information <- function(dataset, data.char) {\n  rspmi <- GetMeasure(\"res.symb.pair.mutual.information\", data.char)\n  mean(unlist(rspmi))\n}\n\nmin_res.symb.pair.mutual.information <- function(dataset, data.char) {\n  rspmi <- GetMeasure(\"res.symb.pair.mutual.information\", data.char)\n  min(unlist(rspmi))\n}\n\nmax_res.symb.pair.mutual.information <- function(dataset, data.char) {\n  rspmi <- GetMeasure(\"res.symb.pair.mutual.information\", data.char)\n  max(unlist(rspmi))\n}\n\nvar_res.symb.pair.mutual.information <- function(dataset, data.char) {\n  rspmi <- GetMeasure(\"res.symb.pair.mutual.information\", data.char)\n  var(unlist(rspmi))\n}\n\nsd_res.symb.pair.mutual.information <- function(dataset, data.char) {\n  rspmi <- GetMeasure(\"res.symb.pair.mutual.information\", data.char)\n  sd(unlist(rspmi))\n}\n\nhist_res.symb.pair.mutual.information <- function(dataset, data.char) {\n  x <- unlist(GetMeasure(\"res.symb.pair.mutual.information\", data.char))\n  x <- range01(na.omit(as.numeric(x)))\n\n  if (length(na.omit(x)) == 0) {\n    return(NA)\n  } else {\n    return(hist(x,breaks=seq(from=min(x), to=max(x), by=(max(x)-min(x))/10), plot = FALSE)$counts)\n  }\n}\n\nhist_res.symb.pair.mutual.information.bin1 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_res.symb.pair.mutual.information\", data.char))[1]\n}\n\nhist_res.symb.pair.mutual.information.bin2 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_res.symb.pair.mutual.information\", data.char))[2]\n}\n\nhist_res.symb.pair.mutual.information.bin3 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_res.symb.pair.mutual.information\", data.char))[3]\n}\n\nhist_res.symb.pair.mutual.information.bin4 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_res.symb.pair.mutual.information\", data.char))[4]\n}\n\nhist_res.symb.pair.mutual.information.bin5 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_res.symb.pair.mutual.information\", data.char))[5]\n}\n\nhist_res.symb.pair.mutual.information.bin6 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_res.symb.pair.mutual.information\", data.char))[6]\n}\n\nhist_res.symb.pair.mutual.information.bin7 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_res.symb.pair.mutual.information\", data.char))[7]\n}\n\nhist_res.symb.pair.mutual.information.bin8 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_res.symb.pair.mutual.information\", data.char))[8]\n}\n\nhist_res.symb.pair.mutual.information.bin9 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_res.symb.pair.mutual.information\", data.char))[9]\n}\n\nhist_res.symb.pair.mutual.information.bin10 <- function(dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_res.symb.pair.mutual.information\", data.char))[10]\n}\n\navg.mutual.information <- function(dataset, data.char) {\n  mutual.information <- GetMeasure(\"mutual.information\", data.char)\n  mean(as.numeric(mutual.information))\n}\n\nmax_mutual.information <- function(dataset, data.char) {\n  mutual.information <- GetMeasure(\"mutual.information\", data.char)\n  max(as.numeric(mutual.information))\n}\n\nmin_mutual.information <- function(dataset, data.char) {\n  mutual.information <- GetMeasure(\"mutual.information\", data.char)\n  min(as.numeric(mutual.information))\n}\n\nvar_mutual.information <- function(dataset, data.char) {\n  mutual.information <- GetMeasure(\"mutual.information\", data.char)\n  var(as.numeric(mutual.information))\n}\n\nsd_mutual.information <- function(dataset, data.char) {\n  mutual.information <- GetMeasure(\"mutual.information\", data.char)\n  sd(as.numeric(mutual.information))\n}\n\n\nhist_mutual.information <- function (dataset, data.char) {\n  x <- na.omit(as.numeric(GetMeasure(\"mutual.information\", data.char)))\n  x <- range01(x)\n\n  if (length(na.omit(x)) == 0) {\n    return(NA)\n  } else {\n    return(hist(x, breaks=seq(from=min(x), to=max(x), by=(max(x)-min(x))/10), plot = FALSE)$counts)\n  }\n}\n\nhist_mutual.information.bin1 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_mutual.information\", data.char))[1]\n}\n\nhist_mutual.information.bin2 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_mutual.information\", data.char))[2]\n}\n\nhist_mutual.information.bin3 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_mutual.information\", data.char))[3]\n}\n\nhist_mutual.information.bin4 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_mutual.information\", data.char))[4]\n}\n\nhist_mutual.information.bin5 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_mutual.information\", data.char))[5]\n}\n\nhist_mutual.information.bin6 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_mutual.information\", data.char))[6]\n}\n\nhist_mutual.information.bin7 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_mutual.information\", data.char))[7]\n}\n\nhist_mutual.information.bin8 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_mutual.information\", data.char))[8]\n}\n\nhist_mutual.information.bin9 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_mutual.information\", data.char))[9]\n}\n\nhist_mutual.information.bin10 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"hist_mutual.information\", data.char))[10]\n}\n\nr_value <- function(dataset, data.char) {\n  k_overlap <- 7\n  theta_overlap <- 4\n\n  data_noclass <- dataset[[2]]$frame[, -ncol(dataset[[2]]$frame)]\n  dist_mat <- as.matrix(dist(data_noclass))\n\n  o.dm <- apply(dist_mat, 1, order)\n  kOL.dm <- t(apply(o.dm, 1, function(o) o[2:(k_overlap + 1)]))\n\n  CLASS <- as.character(dataset[[2]]$frame[, ncol(dataset[[2]]$frame)])\n\n  kOL.class <- t(apply(kOL.dm, 1, function(o) CLASS[o]))\n\n  kLOL.class <- vapply(seq_len(nrow(kOL.dm)), function(o) {\n    CLASS[kOL.dm[o, ]] != CLASS[o]\n  }, logical(k_overlap))\n\n  colSums(kLOL.class) >= theta_overlap\n}\n\navg.r_value <- function(dataset, data.char) {\n  r.values <- GetMeasure(\"r_value\", data.char)\n\n  mean(r.values)\n}\n\nmax_r_value <- function(dataset, data.char) {\n  r.values <- GetMeasure(\"r_value\", data.char)\n\n  max(r.values)\n}\n\nmin_r_value <- function(dataset, data.char) {\n  r.values <- GetMeasure(\"r_value\", data.char)\n\n  min(r.values)\n}\n\nvar_r_value <- function(dataset, data.char) {\n  r.values <- GetMeasure(\"r_value\", data.char)\n\n  var(r.values)\n}\n\nsd_r_value <- function(dataset, data.char) {\n  r.values <- GetMeasure(\"r_value\", data.char)\n\n  sd(r.values)\n}\n\nr_value.hist <- function (dataset, data.char) {\n  r.values <- GetMeasure(\"r_value\", data.char)\n  x <- range01(na.omit(as.numeric(r.values)))\n  if (length(na.omit(x)) == 0) {\n    return(NA)\n  } else {\n    return(hist(x,breaks=seq(from=min(x), to=max(x), by=(max(x)-min(x))/10), plot = FALSE)$counts)\n  }\n}\n\nr_value.hist1 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"r_value.hist\", data.char))[1]\n}\n\nr_value.hist2 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"r_value.hist\", data.char))[2]\n}\n\nr_value.hist3 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"r_value.hist\", data.char))[3]\n}\n\nr_value.hist4 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"r_value.hist\", data.char))[4]\n}\n\nr_value.hist5 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"r_value.hist\", data.char))[5]\n}\n\nr_value.hist6 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"r_value.hist\", data.char))[6]\n}\n\nr_value.hist7 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"r_value.hist\", data.char))[7]\n}\n\nr_value.hist8 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"r_value.hist\", data.char))[8]\n}\n\nr_value.hist9 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"r_value.hist\", data.char))[9]\n}\n\nr_value.hist10 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"r_value.hist\", data.char))[10]\n}\n\n\nrelieff.weights <- function (dataset, data.char) {\n  d <- dataset[[2]]$frame\n\n  weights <- CORElearn::attrEval(class ~., data=d, estimator=\"ReliefFexpRank\", ReliefIterations=30)\n  weights <- weights[is.finite( (weights * 10) / 10 )]\n\n  weights\n}\n\nrelieff.weights.avg <- function (dataset, data.char) {\n  js <- GetMeasure(\"relieff.weights\", data.char)\n\n  mean(js)\n}\n\nrelieff.weights.max <- function (dataset, data.char) {\n  js <- GetMeasure(\"relieff.weights\", data.char)\n  max(js)\n}\n\nrelieff.weights.min <- function (dataset, data.char) {\n  js <- GetMeasure(\"relieff.weights\", data.char)\n  return(  min(js)  )\n}\n\nrelieff.weights.var <- function (dataset, data.char) {\n  js <- GetMeasure(\"relieff.weights\", data.char)\n  var(js)\n}\n\nrelieff.weights.sd <- function (dataset, data.char) {\n  js <- GetMeasure(\"relieff.weights\", data.char)\n  sd(js)\n}\n\nrelieff.weights.hist <- function (dataset, data.char) {\n  js <- GetMeasure(\"relieff.weights\", data.char)\n  x <- range01(na.omit(as.numeric(js)))\n  if (length(na.omit(x)) == 0) {\n    return(NA)\n  } else {\n    return(hist(x,breaks=seq(from=min(x), to=max(x), by=(max(x)-min(x))/10), plot = FALSE)$counts)\n  }\n}\n\nrelieff.weights.hist1 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"relieff.weights.hist\", data.char))[1]\n}\n\nrelieff.weights.hist2 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"relieff.weights.hist\", data.char))[2]\n}\n\nrelieff.weights.hist3 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"relieff.weights.hist\", data.char))[3]\n}\n\nrelieff.weights.hist4 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"relieff.weights.hist\", data.char))[4]\n}\n\nrelieff.weights.hist5 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"relieff.weights.hist\", data.char))[5]\n}\n\nrelieff.weights.hist6 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"relieff.weights.hist\", data.char))[6]\n}\n\nrelieff.weights.hist7 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"relieff.weights.hist\", data.char))[7]\n}\n\nrelieff.weights.hist8 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"relieff.weights.hist\", data.char))[8]\n}\n\nrelieff.weights.hist9 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"relieff.weights.hist\", data.char))[9]\n}\n\nrelieff.weights.hist10 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"relieff.weights.hist\", data.char))[10]\n}\n\nskewness.values <- function(dataset, data.char) {\n  wkContAttrs <- ContAttrs(dataset)\n  s <- NULL\n\n  if (length(wkContAttrs) > 0) {\n    for (l in 1:length(wkContAttrs)) {\n      s[l] <- e1071::skewness(dataset[[2]]$frame[,wkContAttrs[l]])\n    }\n  } else {\n    s <- NA\n  }\n  s\n}\n\navg.skewness <- function(dataset, data.char) {\n  mean(GetMeasure(\"skewness.values\", data.char))\n}\n\navg.abs.skewness <- function(dataset, data.char) {\n  mean(abs(GetMeasure(\"skewness.values\", data.char)))\n}\n\nmax_abs.skewness <- function(dataset, data.char) {\n  max(abs(GetMeasure(\"skewness.values\", data.char)))\n}\n\nmin_abs.skewness <- function(dataset, data.char) {\n  min(abs(GetMeasure(\"skewness.values\", data.char)))\n}\n\nsd_abs.skewness <- function(dataset, data.char) {\n  sd(abs(GetMeasure(\"skewness.values\", data.char)))\n}\n\nvar_abs.skewness <- function(dataset, data.char) {\n  var(abs(GetMeasure(\"skewness.values\", data.char)))\n}\n\nskewness.hist <- function (dataset, data.char) {\n  js <- GetMeasure(\"skewness.values\", data.char)\n  x <- range01(na.omit(as.numeric(js)))\n  if (length(na.omit(x)) == 0) {\n    return(NA)\n  } else {\n    return(hist(x,breaks=seq(from=min(x), to=max(x), by=(max(x)-min(x))/10), plot = FALSE)$counts)\n  }\n}\n\nskewness.hist1 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"skewness.hist\", data.char))[1]\n}\n\nskewness.hist2 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"skewness.hist\", data.char))[2]\n}\n\nskewness.hist3 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"skewness.hist\", data.char))[3]\n}\n\nskewness.hist4 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"skewness.hist\", data.char))[4]\n}\n\nskewness.hist5 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"skewness.hist\", data.char))[5]\n}\n\nskewness.hist6 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"skewness.hist\", data.char))[6]\n}\n\nskewness.hist7 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"skewness.hist\", data.char))[7]\n}\n\nskewness.hist8 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"skewness.hist\", data.char))[8]\n}\n\nskewness.hist9 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"skewness.hist\", data.char))[9]\n}\n\nskewness.hist10 <- function (dataset, data.char) {\n  bin <- as.vector(GetMeasure(\"skewness.hist\", data.char))[10]\n}\n",
    "created" : 1499242931624.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3140324044",
    "id" : "1FC0234",
    "lastKnownWriteTime" : 1499244588,
    "last_content_update" : 1499244588,
    "path" : "~/Dropbox/AutoFuckingBagging/package/autoBagging/R/systematic-metafeatures.r",
    "project_path" : "R/systematic-metafeatures.r",
    "properties" : {
        "source_window_id" : "w8ntv0el2qy0q"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}